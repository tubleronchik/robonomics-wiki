{"hash":"241f25bd2e83e5470e1ad8f0bed93d1f63beb6ce","data":{"doc":{"id":"9336b28bf1e0dde55cd4e126eed3c3b0","title":"Control Kuka manipulator with robonomics.","headings":[{"value":"Control Kuka manipulator with robonomics."}],"subtitles":[{"depth":1,"value":"Control Kuka manipulator with robonomics.","anchor":"#control-kuka-manipulator-with-robonomics"},{"depth":2,"value":"Requirements","anchor":"#requirements"},{"depth":2,"value":"Installation","anchor":"#installation"},{"depth":2,"value":"Running gazebo model","anchor":"#running-gazebo-model"},{"depth":2,"value":"Running robonomics","anchor":"#running-robonomics"},{"depth":2,"value":"Running ipfs","anchor":"#running-ipfs"},{"depth":2,"value":"Running control package","anchor":"#running-control-package"}],"content":"# Control Kuka manipulator with robonomics.\nVideo with an example of work can be found here:\n\n[https://youtu.be/Fhf9LIt6zXQ](https://youtu.be/Fhf9LIt6zXQ)\n***\n## Requirements\n* ROS melodic, Gazebo (installation instraction [here](http://wiki.ros.org/melodic/Installation/Ubuntu))\n* Some extra packages\n```bash\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n```\n* IPFS 0.4.22 (download from [here](https://www.npackd.org/p/ipfs/0.4.22) and install)\n```bash\ntar -xvzf go-ipfs_v0.4.22_linux-386.tar.gz\ncd go-ipfs/\nsudo bash install.sh\nipfs init\n```\n* ipfshttpclient\n```bash\npip install ipfshttpclient\n```\n* Robonomics node (binary file) (download latest release [here](https://github.com/airalab/robonomics/releases))\n* IPFS browser extension (not necessary)\n***\n## Installation\nInstall Kuka manipulator and control packages\n```bash\ncd catkin_wc/src/\ngit clone https://github.com/orsalmon/kuka_manipulator_gazebo\ngit clone https://github.com/LoSk-p/kuka_controller\ncd ..\ncatkin_make\n```\n***\n## Running gazebo model\n```bash\nroslaunch manipulator_gazebo manipulator_empty_world.launch\n```\nIn a new window\n```bash\nrosrun manipulator_gazebo move_arm_server\n```\n![model](./images/kuka-demo/gazebo.jpg)\n***\n## Running robonomics\nGo to the folder with robonomics file ad create a local robonomics network:\n```bash\n./robonomics --dev --rpc-cors all\n```\n\n![robonomics](./images/kuka-demo/robonomics.jpg)\n\n**Important!** Before next launches it is necessary to remove a directory `db` with\n\n```\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n```\n\nGo to https://parachain.robonomics.network and switch to local node\n\n![local](./images/kuka-demo/local.jpg)\n\nThen go to Accounts and create KUKA and WORK accounts. Save account's addresses and keys, you will need them later\n\n![acc](./images/kuka-demo/create_account.jpg)\n\n![accs](./images/kuka-demo/accounts.jpg)\n***\n## Running ipfs\nRun ipfs daemon:\n```bash\nipfs daemon\n```\n***\n## Running control package\nIn kuka_control package path you need to edit move_arm_client.py. \n```bash\ncd src/\nnano move_arm_client.py\n```\nChange kuka_address, kuka_key and work_address to you addresses and key, then change robonomics_path to your path to file robonomics.\n\n![code](./images/kuka-demo/code.jpg)\n\nNow you can run control script:\n```bash\npython move_arm_client.py\n```\n![control](./images/kuka-demo/control.jpg)\n\nThen in a new window send a transaction to make Kuka move:\n```bash\necho \"ON\" | ./robonomics io write launch -r <KUKA_ADDRESS> -s <WORK_KEY>\n```\nWhere <KUKA_ADDRESS> and <WORK_KEY> are address and key from your accounts:\n\n![transaction](./images/kuka-demo/transaction.jpg)\n\nIn the window with kuka_control package you will see:\n\n![done](./images/kuka-demo/done.jpg)\n\nThen go Developer/Chain state on the Robonomics portal, select datalog in query and add KUKA datalog with button '+':\n\n![datalog](./images/kuka-demo/datalog.jpg)\n\nNow you can find Kuka's telemetry using this hash in IPFS Companion:\n\n![ipfs](./images/kuka-demo/ipfs.jpg)\n\n![telemetry](./images/kuka-demo/telemetry.jpg)\n\n\n\n\n\n"}},"context":{}}